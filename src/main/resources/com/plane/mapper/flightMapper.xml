<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.plane.mapper.flightMapper">

    <update id="updateFlightMoney">
        update flight
        set ectMoney = #{ectMoney}, bctMoney = #{bctMoney}
        where flightNo = #{flightNo}
    </update>

    <select id="findAirlineIsRepeat">
        select count(*)
        from airline
        where (airportNo1=#{airportNo1} and airportNo2=#{airportNo2}) or
                (airportNo1=#{airportNo2} and airportNo2=#{airportNo1})
    </select>

    <insert id="insertPlane">
        insert into plane(planeNo, airlineCompanyNo, planeTypeNo, ect, bct)
        values (#{planeNo}, #{airlineCompanyNo}, #{planeTypeNo}, #{ect}, #{bct})
    </insert>

    <select id="findCompany">
        select *
        from airlineCompany
    </select>

    <insert id="insertAirline">
        insert into airline
        values (#{airportNo1}, #{airportNo2})
    </insert>

    <select id="findAirport">
        select *
        from airport
    </select>

    <select id="findHotCity">
        select top 10 city1
        from findHotCity
        order by soldRate desc
    </select>
    
    <insert id="insertAirlineCompany">
        insert into airlineCompany(airlineCompanyNo, airlineCompanyName)
        values (#{airlineCompanyNo}, #{airlineCompanyName})
    </insert>
    
    <select id="updateFlightNoMessage">
<!--        这里存储过程用select的原因是在存储过程中， 用select 1和select 0 判断该存储过程有没有进入我们需要的判断分支   -->
        {
            call procedure_updateFlightNoMessage (
                #{flightNo}
            )
        }
    </select>

    <select id="findAirline">
        select *
        from findAirlineMessageAll
    </select>

    <select id="findPlane">
        select *
        from plane
    </select>

    <delete id="returnTicket">
        delete
        from ticket
        where ticketNo = #{ticketNo}
    </delete>

    <select id="findTicket">
        {
            call procedure_findTicket (
                #{account}
            )
        }
    </select>

    <update id="changeFlightTime">
        update Flight
        set takeOffTime = #{takeOffTime}, landTime = #{landTime}
        where flightNo = #{flightNo}
    </update>
    
    <insert id="insertTicket">
        {
            call procedure_insertTicket (
                #{flightNo},
                #{account},
                #{pIDNo},
                #{Level1}
            )
        }
<!--        insert into ticket (flightNo, account, pIDNo, ticketNo, [Level])-->
<!--        values(#{flightNo}, #{account}, #{pIDNo}, #{ticketNo}, #{Level1})-->
    </insert>

    <insert id="insertFlight">
        {
            call procedure_insertFlight (
                #{ectMoney},
                #{bctMoney},
                #{airlineNo},
                #{state},
                #{planeNo}
            )
        }
    </insert>

    <select id="getFlightByMessage">
<!--        select *-->
<!--        from findFlightMessageAll-->
<!--        where airportLocation1 = #{airportLocation1}-->
<!--                and airportLocation2 = #{airportLocation2}-->
<!--                and takeoffTime between #{time1} and #{time2}-->
        {
            call procedure_getFlightByMessage (
                #{airportLocation1},
                #{airportLocation2},
                #{time1},
                #{time2}
            )
        }
    </select>

    <select id="getFlightByUnknown">
        {
            call procedure_getFlightByUnknown (
                #{x}
            )
        }
    </select>

    <select id="getFlightAll">
        SELECT *
        FROM findFlightMessageAll
    </select>
</mapper>